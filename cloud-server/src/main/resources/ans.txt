1. Как организовать клиент-серверное взаимодействие?
Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?

java.nio лучше с точки зрения производительности, т.к. не нужно на сервере создавать по треду на каждое соединение.
Netty мощный фреймворк, предоставит больше возможностей для реализации сетевого взаимодействия.
На данном этапе я выбрала java.io, т.к. был опыт работы только с ним, не достаточно времени разобраться с nio, Netty

2. Как и в каком виде передавать файлы?
Как пересылать большие файлы?

Реализовать свой протокол передачи.
При загрузке файла сжимать его на клиенте, передавать сжатый файл частями, формат следующий:
2 байта - команда
4 байта - длина имени файла
имя файла
8 байт - размер файла в несжатом виде
куски сжатого файла, состоящие из:
1 байт - флаг последний/не последний кусок
4 байта - длина куска
данные

На сервере хранить файлы в сжатом виде, при скачивании будет следующий формат:
2 байта - команда
8 байт - длина файла в сжатом виде
данные (файл в сжатом виде)

На сервере файлы клента хранить в каталоге(название = ид клиента из БД), названия файлов - ид файла из БД.
Структуру каталогов, имена файлов хранить в БД.

3. Как пересылать служебные команды?

В отдельном сетевом потоке. Т.е. для клиента будет 1й поток - загрузка/скачивание, 2й - остальные служебные команды

4. Что хранить в базе данных?

Данные клиента, хеш пароля
Данные файлов клиента: пути, имена, размер файлов в несжатом виде, статус загрузки
Каталоги клиента, связь файлов с каталогами, чтобы было возможно быстро удалить каталог целиком

5. Как передавать структуру каталогов/файлов?

Отдельная служебная команда (при логине клиента, при обновлении).
Сервер возвращает список файлов (путь, имя, размер). Клиент из этого списка собирает структуру.
